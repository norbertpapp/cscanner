{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CScanner: A Cloud Security Scanner This utility is intended to check your cloud configuration for compliance with your companies rules in an automated fashion, not unlike AWS config. For example, if you want to make sure that your port 22 is never open to the world, across all your cloud providers, you could do something like this: connections: # Configure your connections here rules: - type: FIREWALL_PUBLIC_SERVICE_PROHIBITED protocol: tcp ports: - 22 You would then get a report detailing all your security groups across all your cloud providers and if they are compliant or are violating the rules. Downloading You can grab one of the releases from GitHub. Running To run the cscanner, simply point it to your config file: java -jar cscanner.jar your-config-file.yaml Make sure you have at least Java 8 to run this application. Note that you can use the -h or --help option to get a full list of possible filtering and output options. Configuring The cloud scanner is configured using YAML files. The yaml files have two sections: connections and rules . The layout looks roughly like this: --- connections: # Cloud provider connections go here rules: # Compliance rules go here In connections you configure your various cloud accounts, such as this: exoscale-test: type: exoscale key: secret: The respective options for each cloud provider are documented in their documentation. The connection name can then referenced with the rules. The next section is the rules section, which you can specify your rules in: - type: FIREWALL_PUBLIC_SERVICE_PROHIBITED protocol: tcp ports: - 22 Each rule has two universal parameters: type to specify the rule type and connections which you can use to limit the rule to only certian connections. The default is to use all connections. If a certain cloud provider doesn't support a specific functionality, that cloud provider will be simply skipped for the specified rule. Supported cloud providers Currently the following cloud providers are supported: Amazon Web Services Exoscale Supported rules Currently the following rule sets are supported: Firewall S3 Compiling If you want to compile the utility from source, you will need Maven . Using Maven and at least a JDK compatible with Java 8 you should be able to simply run mvn package to compile the source code and then find the compiled binaries in cli/target .","title":"Home"},{"location":"#cscanner-a-cloud-security-scanner","text":"This utility is intended to check your cloud configuration for compliance with your companies rules in an automated fashion, not unlike AWS config. For example, if you want to make sure that your port 22 is never open to the world, across all your cloud providers, you could do something like this: connections: # Configure your connections here rules: - type: FIREWALL_PUBLIC_SERVICE_PROHIBITED protocol: tcp ports: - 22 You would then get a report detailing all your security groups across all your cloud providers and if they are compliant or are violating the rules.","title":"CScanner: A Cloud Security Scanner"},{"location":"#downloading","text":"You can grab one of the releases from GitHub.","title":"Downloading"},{"location":"#running","text":"To run the cscanner, simply point it to your config file: java -jar cscanner.jar your-config-file.yaml Make sure you have at least Java 8 to run this application. Note that you can use the -h or --help option to get a full list of possible filtering and output options.","title":"Running"},{"location":"#configuring","text":"The cloud scanner is configured using YAML files. The yaml files have two sections: connections and rules . The layout looks roughly like this: --- connections: # Cloud provider connections go here rules: # Compliance rules go here In connections you configure your various cloud accounts, such as this: exoscale-test: type: exoscale key: secret: The respective options for each cloud provider are documented in their documentation. The connection name can then referenced with the rules. The next section is the rules section, which you can specify your rules in: - type: FIREWALL_PUBLIC_SERVICE_PROHIBITED protocol: tcp ports: - 22 Each rule has two universal parameters: type to specify the rule type and connections which you can use to limit the rule to only certian connections. The default is to use all connections. If a certain cloud provider doesn't support a specific functionality, that cloud provider will be simply skipped for the specified rule.","title":"Configuring"},{"location":"#supported-cloud-providers","text":"Currently the following cloud providers are supported: Amazon Web Services Exoscale","title":"Supported cloud providers"},{"location":"#supported-rules","text":"Currently the following rule sets are supported: Firewall S3","title":"Supported rules"},{"location":"#compiling","text":"If you want to compile the utility from source, you will need Maven . Using Maven and at least a JDK compatible with Java 8 you should be able to simply run mvn package to compile the source code and then find the compiled binaries in cli/target .","title":"Compiling"},{"location":"downloads/","text":"Downloads Latest version CScanner is delivered as a single JAR file to run. You can grab the latest release from GitHub releases . Source code The source code is available via git from GitHub .","title":"Downloads"},{"location":"downloads/#downloads","text":"","title":"Downloads"},{"location":"downloads/#latest-version","text":"CScanner is delivered as a single JAR file to run. You can grab the latest release from GitHub releases .","title":"Latest version"},{"location":"downloads/#source-code","text":"The source code is available via git from GitHub .","title":"Source code"},{"location":"imprint/","text":"Imprint This website is operated by: Janos Pasztor Graf-Starhemberg-Gasse 47/6 1040 Wien Austria","title":"Imprint"},{"location":"imprint/#imprint","text":"This website is operated by: Janos Pasztor Graf-Starhemberg-Gasse 47/6 1040 Wien Austria","title":"Imprint"},{"location":"privacy/","text":"Privacy policy This is the privacy policy for the website cscanner.io. This website is operated by: Janos Pasztor Graf-Starhemberg-Gasse 47/6 1040 Wien Austria Cookies This website uses no cookies. Personal data collected by this website This website does not directly collect personal data. Third party providers This website is hosted on GitHub pages. As such, when loading this website, your IP address will be available and may be stored by GitHub in their accesslogs, along with the information which page specifically you loaded. Information requests Information requests can be sent via postal mail to the address above and will receive a written answer within 30 days.","title":"Privacy Policy"},{"location":"privacy/#privacy-policy","text":"This is the privacy policy for the website cscanner.io. This website is operated by: Janos Pasztor Graf-Starhemberg-Gasse 47/6 1040 Wien Austria","title":"Privacy policy"},{"location":"privacy/#cookies","text":"This website uses no cookies.","title":"Cookies"},{"location":"privacy/#personal-data-collected-by-this-website","text":"This website does not directly collect personal data.","title":"Personal data collected by this website"},{"location":"privacy/#third-party-providers","text":"This website is hosted on GitHub pages. As such, when loading this website, your IP address will be available and may be stored by GitHub in their accesslogs, along with the information which page specifically you loaded.","title":"Third party providers"},{"location":"privacy/#information-requests","text":"Information requests can be sent via postal mail to the address above and will receive a written answer within 30 days.","title":"Information requests"},{"location":"clouds/aws/","text":"Amazon Web Services Amazon Web Services , or AWS, is a popular cloud provider and is supported by cscanner. The configuration does as follows: connection-name: type: aws accessKeyId: secretAccessKey: sessionToken: profile: Each of the parameters is optional. If they are not provided, the default is to fall back to the AWS client default behavior, such as reading options from environment variables or credentials files. Rules The AWS provider currently supports the following rules: Firewall S3","title":"Amazon Web Services"},{"location":"clouds/aws/#amazon-web-services","text":"Amazon Web Services , or AWS, is a popular cloud provider and is supported by cscanner. The configuration does as follows: connection-name: type: aws accessKeyId: secretAccessKey: sessionToken: profile: Each of the parameters is optional. If they are not provided, the default is to fall back to the AWS client default behavior, such as reading options from environment variables or credentials files.","title":"Amazon Web Services"},{"location":"clouds/aws/#rules","text":"The AWS provider currently supports the following rules: Firewall S3","title":"Rules"},{"location":"clouds/exoscale/","text":"Exoscale Exoscale is a European/Swiss IaaS cloud provider and is supported by cscanner. Under the hood it implements a CloudStack-like API. The configuration goes like this: exoscale-test: type: exoscale key: secret: Note, that cloudstack.ini is currently not supported. Rules The Exoscale provider supports the following rule sets: Firewall S3","title":"Exoscale"},{"location":"clouds/exoscale/#exoscale","text":"Exoscale is a European/Swiss IaaS cloud provider and is supported by cscanner. Under the hood it implements a CloudStack-like API. The configuration goes like this: exoscale-test: type: exoscale key: secret: Note, that cloudstack.ini is currently not supported.","title":"Exoscale"},{"location":"clouds/exoscale/#rules","text":"The Exoscale provider supports the following rule sets: Firewall S3","title":"Rules"},{"location":"development/","text":"Contributing to CScanner First of all, thank you for your interest in helping out CScanner! Before you jump in, please keep in mind that CScanner is a very young project and the APIs have not yet stabilized. Before you jump in and write some code, make sure to open an issue with your proposal or jump on Discord so you can receive adequate support for doing so. What to contribute There is a great need for cloud provider implementations as well as new rule sets. However, please refrain (for now) from contributing on-premises providers such as VMWare, because there is no affordable infrastructure to run CScanner automated tests against. Setting up your development environment. In order to write code for CScanner you will need three things: A Java 8 JDK. Any will do, but OpenJDK is preferred. Maven. This is our dependency manager. An account with the cloud provider you want to work with. It is also recommended that you use an IDE as Java is not the easiest language to work with if you don't have one. The project is built with IntelliJ IDEA, but any will do. Building the project The project can be built with a simple mvn package . However, keep in mind that some tests depend on a cloud provider configuration to be available, which will be documented at a later stage. Please open an issue or go on Discord to receive some help in setting this up. (Yes, this will be improved later on.) Sending a pull request Once you're done, please send a pull request with your changes. The integration may take some time as documentation may need to be written and a proper QA environment has to be set up.","title":"Contributing to CScanner"},{"location":"development/#contributing-to-cscanner","text":"First of all, thank you for your interest in helping out CScanner! Before you jump in, please keep in mind that CScanner is a very young project and the APIs have not yet stabilized. Before you jump in and write some code, make sure to open an issue with your proposal or jump on Discord so you can receive adequate support for doing so.","title":"Contributing to CScanner"},{"location":"development/#what-to-contribute","text":"There is a great need for cloud provider implementations as well as new rule sets. However, please refrain (for now) from contributing on-premises providers such as VMWare, because there is no affordable infrastructure to run CScanner automated tests against.","title":"What to contribute"},{"location":"development/#setting-up-your-development-environment","text":"In order to write code for CScanner you will need three things: A Java 8 JDK. Any will do, but OpenJDK is preferred. Maven. This is our dependency manager. An account with the cloud provider you want to work with. It is also recommended that you use an IDE as Java is not the easiest language to work with if you don't have one. The project is built with IntelliJ IDEA, but any will do.","title":"Setting up your development environment."},{"location":"development/#building-the-project","text":"The project can be built with a simple mvn package . However, keep in mind that some tests depend on a cloud provider configuration to be available, which will be documented at a later stage. Please open an issue or go on Discord to receive some help in setting this up. (Yes, this will be improved later on.)","title":"Building the project"},{"location":"development/#sending-a-pull-request","text":"Once you're done, please send a pull request with your changes. The integration may take some time as documentation may need to be written and a proper QA environment has to be set up.","title":"Sending a pull request"},{"location":"development/provider/","text":"Writing a Provider The API may change! CScanner is a very young project and the internal API has not yet stabilized. It is recommended that you contact the author before starting to write a rule or provider to coordinate efforts. Integrating a new provider is quite a challenging task as you will need to decide which rules you want to support. First off you start with your provider class: public class YourCloudProvider implements CloudProvider YourConfiguration, YourConnection { } Additionally, you will want to look into each of the rules what additional classes you can implement , such as S3CloudProvider YourConfiguration, YourConnection or FirewallCloudProvider YourConfiguration, YourConnection . These interfaces are used when walking through the cloud accounts to determine which cloud supports which rules. The configuration class Next up, you will need to write your configuration class: public class YourConfiguration { @Nullable public final String key; @Nullable public final String secret; public YourConfiguration( @Nullable String key, @Nullable String secret ) { this.key = key; this.secret = secret; } } This is very plain and simple and only serves to store the configuration relevant to your cloud provider. This configuration class will be filled in your cloud provider class later. The connection class The third thing you need to create is a connection class like so: public class YourConnection implements CloudProviderConnection { private final String name; private final YourConfiguration configuration; public YourConnection( String name, YourConfiguration configuration ) { this.name = name; this.configuration = configuration; } @Override public String getConnectionName() { return name; } } Based on what your cloud provider will support, you will need to implement additional classes, such as S3Connection and you will need to implement the methods relevant to that interface too, such as returning an S3 client based on your configuration. Reading the configuration Now we have reached the point to implement some functions in our cloud provider class, most importantly reading the configuration. You will receive the configuration for your provider as a Map String, Object . Keep in mind that the configuration comes from a YAML, JSON, etc file so it is your responsibility to vet the content and make sure you have the correct data types. For example public class YourCloudProvider implements CloudProvider YourConfiguration, YourConnection { @Override public YourConnection getConnection( String name, Map String, Object configuration ) { YourConfiguration configObject = new YourConfiguration( (String) configuration.getOrDefault( key , null), (String) configuration.getOrDefault( secret , null) ); return new YourConnection(name, configObject); } } Writing a plugin Finally, you will need to write a plugin. This is quite simple: @ParametersAreNonnullByDefault public class YourPlugin implements Plugin { @Override public List CloudProvider ?, ? getCloudProviders() { return Arrays.asList( new YourCloudProvider() ); } } You will need to add this client to the cli module as at this time there is no automatic plugin discovery.","title":"Writing a Provider"},{"location":"development/provider/#writing-a-provider","text":"The API may change! CScanner is a very young project and the internal API has not yet stabilized. It is recommended that you contact the author before starting to write a rule or provider to coordinate efforts. Integrating a new provider is quite a challenging task as you will need to decide which rules you want to support. First off you start with your provider class: public class YourCloudProvider implements CloudProvider YourConfiguration, YourConnection { } Additionally, you will want to look into each of the rules what additional classes you can implement , such as S3CloudProvider YourConfiguration, YourConnection or FirewallCloudProvider YourConfiguration, YourConnection . These interfaces are used when walking through the cloud accounts to determine which cloud supports which rules.","title":"Writing a Provider"},{"location":"development/provider/#the-configuration-class","text":"Next up, you will need to write your configuration class: public class YourConfiguration { @Nullable public final String key; @Nullable public final String secret; public YourConfiguration( @Nullable String key, @Nullable String secret ) { this.key = key; this.secret = secret; } } This is very plain and simple and only serves to store the configuration relevant to your cloud provider. This configuration class will be filled in your cloud provider class later.","title":"The configuration class"},{"location":"development/provider/#the-connection-class","text":"The third thing you need to create is a connection class like so: public class YourConnection implements CloudProviderConnection { private final String name; private final YourConfiguration configuration; public YourConnection( String name, YourConfiguration configuration ) { this.name = name; this.configuration = configuration; } @Override public String getConnectionName() { return name; } } Based on what your cloud provider will support, you will need to implement additional classes, such as S3Connection and you will need to implement the methods relevant to that interface too, such as returning an S3 client based on your configuration.","title":"The connection class"},{"location":"development/provider/#reading-the-configuration","text":"Now we have reached the point to implement some functions in our cloud provider class, most importantly reading the configuration. You will receive the configuration for your provider as a Map String, Object . Keep in mind that the configuration comes from a YAML, JSON, etc file so it is your responsibility to vet the content and make sure you have the correct data types. For example public class YourCloudProvider implements CloudProvider YourConfiguration, YourConnection { @Override public YourConnection getConnection( String name, Map String, Object configuration ) { YourConfiguration configObject = new YourConfiguration( (String) configuration.getOrDefault( key , null), (String) configuration.getOrDefault( secret , null) ); return new YourConnection(name, configObject); } }","title":"Reading the configuration"},{"location":"development/provider/#writing-a-plugin","text":"Finally, you will need to write a plugin. This is quite simple: @ParametersAreNonnullByDefault public class YourPlugin implements Plugin { @Override public List CloudProvider ?, ? getCloudProviders() { return Arrays.asList( new YourCloudProvider() ); } } You will need to add this client to the cli module as at this time there is no automatic plugin discovery.","title":"Writing a plugin"},{"location":"development/rule/","text":"Writing a Rule The API may change! CScanner is a very young project and the internal API has not yet stabilized. It is recommended that you contact the author before starting to write a rule or provider to coordinate efforts. Writing a rule is a lot less well described than writing a provider as each rule has its very own implementation. For this example we will stick with an S3 implementation for various cloud providers. Writing a rule class First of all, we are going to write our actual rule class: public class MyS3Rule implements Rule S3Connection { public final static String RULE = S3_MY_RULE ; //This is a parameter that comes from the configuration private final boolean scanContents; public MyS3Rule( boolean scanContents ) { this.scanContents = scanContents; } @Override public List RuleResult evaluate(S3Connection s3Connection) { //Evaluate rules here and respond with a list of results. These results contain resources and their compliancy //status. } } Writing a connection interface Now, if you look at this class you can see that it needs an S3Connection . This is an interface that will let you retrieve the actual S3 client. public interface S3Connection extends CloudProviderConnection { AmazonS3 getS3Client(); } This connection will be injected to the evaluate call for each connection that needs to be checked. Keep in mind though that some implementations may be more complicated as the cloud resource may be, for example, bound to a region that you need to handle. Writing a rule builder In order for the system to be able to construct the rule with the appropriate parameters, you will also need a rule builder like so: public class MyS3RuleBuilder implements RuleBuilder S3PublicReadProhibitedRule, S3Connection { @Override public String getType() { return S3PublicReadProhibitedRule.RULE; } @Override public Class S3Connection getConnectionType() { return S3Connection.class; } @Override public MyS3Rule create(Map String, Object options) { //return the configured rule here. } } Writing a plugin Finally you will need to write a plugin to load the rule. This is quite simple: public class MyS3Plugin implements Plugin { @Override public List RuleBuilder ?, ? getSupportedRules() { //noinspection unchecked return Arrays.asList( new MyS3RuleBuilder() ); } } The plugin will need to be added to the CLI module as there is no automatic plugin discovery at this time.","title":"Writing a Rule"},{"location":"development/rule/#writing-a-rule","text":"The API may change! CScanner is a very young project and the internal API has not yet stabilized. It is recommended that you contact the author before starting to write a rule or provider to coordinate efforts. Writing a rule is a lot less well described than writing a provider as each rule has its very own implementation. For this example we will stick with an S3 implementation for various cloud providers.","title":"Writing a Rule"},{"location":"development/rule/#writing-a-rule-class","text":"First of all, we are going to write our actual rule class: public class MyS3Rule implements Rule S3Connection { public final static String RULE = S3_MY_RULE ; //This is a parameter that comes from the configuration private final boolean scanContents; public MyS3Rule( boolean scanContents ) { this.scanContents = scanContents; } @Override public List RuleResult evaluate(S3Connection s3Connection) { //Evaluate rules here and respond with a list of results. These results contain resources and their compliancy //status. } }","title":"Writing a rule class"},{"location":"development/rule/#writing-a-connection-interface","text":"Now, if you look at this class you can see that it needs an S3Connection . This is an interface that will let you retrieve the actual S3 client. public interface S3Connection extends CloudProviderConnection { AmazonS3 getS3Client(); } This connection will be injected to the evaluate call for each connection that needs to be checked. Keep in mind though that some implementations may be more complicated as the cloud resource may be, for example, bound to a region that you need to handle.","title":"Writing a connection interface"},{"location":"development/rule/#writing-a-rule-builder","text":"In order for the system to be able to construct the rule with the appropriate parameters, you will also need a rule builder like so: public class MyS3RuleBuilder implements RuleBuilder S3PublicReadProhibitedRule, S3Connection { @Override public String getType() { return S3PublicReadProhibitedRule.RULE; } @Override public Class S3Connection getConnectionType() { return S3Connection.class; } @Override public MyS3Rule create(Map String, Object options) { //return the configured rule here. } }","title":"Writing a rule builder"},{"location":"development/rule/#writing-a-plugin","text":"Finally you will need to write a plugin to load the rule. This is quite simple: public class MyS3Plugin implements Plugin { @Override public List RuleBuilder ?, ? getSupportedRules() { //noinspection unchecked return Arrays.asList( new MyS3RuleBuilder() ); } } The plugin will need to be added to the CLI module as there is no automatic plugin discovery at this time.","title":"Writing a plugin"},{"location":"rules/firewall/","text":"Firewall rules This section details how to configure the firewall compliance rules. Do not permit a certain port to be public This rule fails if there is a firewall rule allowing access to a certain port from the whole internet ( 0.0.0.0/0 or ::/0 ). The configuration is as follows: - type: FIREWALL_PUBLIC_SERVICE_PROHIBITED protocol: tcp ports: - 22 include: - some.*regexp exclude: - public protocol This option specifies the protocol, either as a name or a number. It accepts only a single protocol. ports This option accepts a list of ports that should be checked. include This option accepts a regular expression to match against the security group name. If include is specified, only the security groups with the specified name will be considered. Note that each cloud provider implements security groups differently. The AWS provider , for example, will return an ARN. (To Be Fixed) exclude This option lets you exclude certain firewall / security groups from checking, similar to include above. The exclude rule takes precedence over include.","title":"Firewall"},{"location":"rules/firewall/#firewall-rules","text":"This section details how to configure the firewall compliance rules.","title":"Firewall rules"},{"location":"rules/firewall/#do-not-permit-a-certain-port-to-be-public","text":"This rule fails if there is a firewall rule allowing access to a certain port from the whole internet ( 0.0.0.0/0 or ::/0 ). The configuration is as follows: - type: FIREWALL_PUBLIC_SERVICE_PROHIBITED protocol: tcp ports: - 22 include: - some.*regexp exclude: - public","title":"Do not permit a certain port to be public"},{"location":"rules/firewall/#protocol","text":"This option specifies the protocol, either as a name or a number. It accepts only a single protocol.","title":"protocol"},{"location":"rules/firewall/#ports","text":"This option accepts a list of ports that should be checked.","title":"ports"},{"location":"rules/firewall/#include","text":"This option accepts a regular expression to match against the security group name. If include is specified, only the security groups with the specified name will be considered. Note that each cloud provider implements security groups differently. The AWS provider , for example, will return an ARN. (To Be Fixed)","title":"include"},{"location":"rules/firewall/#exclude","text":"This option lets you exclude certain firewall / security groups from checking, similar to include above. The exclude rule takes precedence over include.","title":"exclude"},{"location":"rules/s3/","text":"S3 Rules This section details the rules relevant to AWS S3 and compatible object storages. Do not permit an S3 bucket to be public This rule checks S3 bucket ACLs so that they are not public. The configuration goes like this: - type: S3_PUBLIC_READ_PROHIBITED include: - some.*regexp exclude: - some.*regexp include This option accepts a regular expression to match against the bucket name. If include is specified, only the security groups with the specified name will be considered. Note that each cloud provider implements buckets differently. The AWS provider , for example, will return an ARN. exclude This option lets you exclude certain buckets from checking, similar to include above. The exclude rule takes precedence over include. scanContents This is a true/false flag indicating if the contents of the buckets should be scanned for ACL violations. If true all files in the bucket will be checked, which may take a very long time. If false only the bucket ACL will be evaluated.","title":"S3"},{"location":"rules/s3/#s3-rules","text":"This section details the rules relevant to AWS S3 and compatible object storages.","title":"S3 Rules"},{"location":"rules/s3/#do-not-permit-an-s3-bucket-to-be-public","text":"This rule checks S3 bucket ACLs so that they are not public. The configuration goes like this: - type: S3_PUBLIC_READ_PROHIBITED include: - some.*regexp exclude: - some.*regexp","title":"Do not permit an S3 bucket to be public"},{"location":"rules/s3/#include","text":"This option accepts a regular expression to match against the bucket name. If include is specified, only the security groups with the specified name will be considered. Note that each cloud provider implements buckets differently. The AWS provider , for example, will return an ARN.","title":"include"},{"location":"rules/s3/#exclude","text":"This option lets you exclude certain buckets from checking, similar to include above. The exclude rule takes precedence over include.","title":"exclude"},{"location":"rules/s3/#scancontents","text":"This is a true/false flag indicating if the contents of the buckets should be scanned for ACL violations. If true all files in the bucket will be checked, which may take a very long time. If false only the bucket ACL will be evaluated.","title":"scanContents"}]}